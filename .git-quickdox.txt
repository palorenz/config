git clone ssh://git@bitbucket.org/sdettmer/config config
cp config/.git ~/
# warning, check local changes etc
# Branches
# - master
# - steffen_win_master - Windows customizations
# - steffen_at_link    - customizations for steffen@link (private)
git config --global user.name "Steffen Dettmer"
git config --global user.email "Steffen Dettmer <steffen.dettmer@gmail.com>"
git config user.name "Steffen Dettmer"
git config user.email "Steffen Dettmer <steffen@dett.de>"
git config --global color.ui auto


# Repos
# url = ssh://git@bitbucket.org/sdettmer/config
# url = git://github.com/sdettmer/config.git
# Merge messages
# git log --pretty=format:'%s (%ad)%n%b' --date=local ORIG_HEAD..MERGE_HEAD


# push a new branch upstream:
git push -u origin mybranch





------------------------------------------------------------------->8=======
COOKBOOK


I moved notes.txt from another GIT repo. I did not want to keep                
"the history", because this included many empty commits (done                  
with other files in the original repository), but I wanted only                
changes of notes.txt. So I created patches:                                    
                                                                               
  $ git format-patch eb2bba11e2b -o tmpdir2                                    
                                                                               
the selected only the patchs for notes.txt:                                    
                                                                               
  $ mkdir tmpdir2 ; cd tmpdir2                                                 
  $ cp -a `grep -l '^--- a/notes.txt' ../tmpdir1/*` .                          
                                                                               
checked that no other files were included in the patches:                      
                                                                               
  $ grep "^--- " *|grep -v notes.txt                                           
                                                                               
and grouped this to one patch                                                  
                                                                               
  $ cat * > all                                                                
                                                                               
to be applied in the other repository:                                         
                                                                               
  $ git am <path>/all                                                          
                                                                               
(before, I checked in empty notes.txt and had to apply the first               
patch by hand (patch < .git/rebase-apply/patch) and continue with               
the commands "git add notes.txt" and "git am --resolved")                      

