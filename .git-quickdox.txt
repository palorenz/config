git clone ssh://git@bitbucket.org/sdettmer/config config
cp config/.git ~/
# warning, check local changes etc
# Branches
# - master
# - steffen_win_master - Windows customizations
# - steffen_at_link    - customizations for steffen@link (private)
git config --global user.name "Steffen Dettmer"
git config --global user.email "steffen.dettmer@gmail.com"
git config user.name "Steffen Dettmer"
git config user.email "steffen@dett.de"
git config --global color.ui auto

# to avoid "git reset --hard HEAD^" after unwanted merge
# ? git config --global alias.pl 'pull --ff-only'
# ? git config --global branch.autosetup.merge false
# or just get used to use git fetch or get used to type "git pull --ff-only"


# Repos
# url = ssh://git@bitbucket.org/sdettmer/config
# url = git://github.com/sdettmer/config.git
# Merge messages
# git log --pretty=format:'%s (%ad)%n%b' --date=local ORIG_HEAD..MERGE_HEAD


# push a new branch upstream:
git push -u origin mybranch


# Windows Putty Agent with Cygwin SSH:
http://cuviper.github.com/ssh-pageant/
# (copy .exe to a folder that is in PATH,
# e.g. C:\cygwin\usr\local\bin)


# see branch topology
#   git log --graph --oneline --branches --decorate --simplify-by-decoration

# ignore untracked
# git config status.showuntrackedfiles no

------------------------------------------------------------------->8=======
COOKBOOK


I moved notes.txt from another GIT repo. I did not want to keep
"the history", because this included many empty commits (done
with other files in the original repository), but I wanted only
changes of notes.txt. So I created patches:

  $ git format-patch eb2bba11e2b -o tmpdir2

the selected only the patchs for notes.txt:

  $ mkdir tmpdir2 ; cd tmpdir2
  $ cp -a `grep -l '^--- a/notes.txt' ../tmpdir1/*` .

checked that no other files were included in the patches:

  $ grep "^--- " *|grep -v notes.txt

and grouped this to one patch

  $ cat * > all

to be applied in the other repository:

  $ git am <path>/all

(before, I checked in empty notes.txt and had to apply the first
patch by hand (patch < .git/rebase-apply/patch) and continue with
the commands "git add notes.txt" and "git am --resolved")

=======8<-------------------------------------------------------------------

Creating an upstream

  $ cd ~/work/repos
  $ mkdir myproj.git
  $ cd myproj.git
  $ git init --bare
  $ cd ~/work/myproj
  $ git remote add origin ~/work/repos/wd-src.git
  $ git push -u origin --all   # don't use --mirror, it pushes remotes!
  $ git push origin --tags



=======8<-------------------------------------------------------------------

master remotes
Note: when working in different branches, direct sync works
without upstream (otherwise, refused to overwrite checked out
branch because would make work tree and index dirty)
[remote "origin"]
	fetch = +refs/heads/*:refs/remotes/origin/*
	; url = https://sdettmer@bitbucket.org/sdettmer/config
	url = ssh://git@bitbucket.org/sdettmer/config
[remote "github"]
	fetch = +refs/heads/*:refs/remotes/origin/*
	url = ssh://git@github.com/sdettmer/config.git
